// TARGETED DEBUG SCRIPT FOR IDENTICAL RESULTS ISSUE
// User getting: 5,22,31,34,38,45 for all ranges

console.log('🔧 TARGETED DEBUGGING FOR IDENTICAL RESULTS');
console.log('=' .repeat(50));
console.log('Issue: All ranges showing 5,22,31,34,38,45');

console.log('\n📋 IMMEDIATE DEBUGGING STEPS:');
console.log('Copy and paste each section below in your browser console:\n');

console.log('// ===== DEBUG STEP 1: CHECK CURRENT STATE =====');
console.log('console.log("Current prediction method:", document.getElementById("predictionMethod").value);');
console.log('console.log("Current draw range:", document.getElementById("drawRange").value);');
console.log('console.log("Historical data loaded:", historical ? historical.length + " draws" : "NOT LOADED");');
console.log('');
console.log('// Check base numbers');
console.log('const currentBases = ["base1", "base2", "base3", "base4", "base5", "base6"]');
console.log('  .map(id => document.getElementById(id).value)');
console.log('  .filter(val => val !== "");');
console.log('console.log("Current base numbers:", currentBases);');

console.log('\n// ===== DEBUG STEP 2: CLEAR EVERYTHING AND TEST =====');
console.log('// Clear all base numbers first');
console.log('["base1", "base2", "base3", "base4", "base5", "base6"].forEach(id => {');
console.log('  const element = document.getElementById(id);');
console.log('  if (element) element.value = "";');
console.log('});');
console.log('console.log("✅ Base numbers cleared");');

console.log('\n// ===== DEBUG STEP 3: TEST HELPER FUNCTIONS DIRECTLY =====');
console.log('function debugHelperFunctions() {');
console.log('  if (!historical || historical.length === 0) {');
console.log('    console.log("❌ No historical data");');
console.log('    return;');
console.log('  }');
console.log('  ');
console.log('  const emptyBases = [];');
console.log('  const includeAdd = false;');
console.log('  ');
console.log('  console.log("\\n--- Testing helper functions directly ---");');
console.log('  ');
console.log('  [20, 50, 100].forEach(range => {');
console.log('    console.log(`\\n=== Range ${range} ===`);');
console.log('    ');
console.log('    try {');
console.log('      const freq = getFrequencyCompatibilityPrediction(emptyBases, range, includeAdd);');
console.log('      const weighted = getWeightedPrediction(emptyBases, range, includeAdd);');
console.log('      const hotCold = getHotColdPrediction(emptyBases, range, includeAdd);');
console.log('      ');
console.log('      console.log(`Frequency+Compat: [${freq.slice(0,6).join(",")}]`);');
console.log('      console.log(`Weighted: [${weighted.slice(0,6).join(",")}]`);');
console.log('      console.log(`Hot/Cold: [${hotCold.slice(0,6).join(",")}]`);');
console.log('    } catch (error) {');
console.log('      console.log(`Error for range ${range}:`, error.message);');
console.log('    }');
console.log('  });');
console.log('}');
console.log('debugHelperFunctions();');

console.log('\n// ===== DEBUG STEP 4: TEST SLICE OPERATIONS =====');
console.log('function debugSliceOperations() {');
console.log('  console.log("\\n--- Testing slice operations ---");');
console.log('  ');
console.log('  [20, 50, 100].forEach(range => {');
console.log('    const sliced = historical.slice(0, range);');
console.log('    console.log(`Range ${range}: ${sliced.length} draws`);');
console.log('    ');
console.log('    // Quick frequency check');
console.log('    const quickFreq = Array(50).fill(0);');
console.log('    sliced.forEach(draw => {');
console.log('      draw.numbers.forEach(n => quickFreq[n]++);');
console.log('    });');
console.log('    ');
console.log('    const top3 = quickFreq');
console.log('      .map((count, num) => ({num, count}))');
console.log('      .filter(item => item.count > 0)');
console.log('      .sort((a, b) => b.count - a.count)');
console.log('      .slice(0, 3);');
console.log('    ');
console.log('    console.log(`  Top 3 numbers: ${top3.map(f => `${f.num}(${f.count})`).join(", ")}`);');
console.log('  });');
console.log('}');
console.log('debugSliceOperations();');

console.log('\n// ===== DEBUG STEP 5: MANUAL ENHANCED ENSEMBLE =====');
console.log('function manualEnhancedEnsemble() {');
console.log('  console.log("\\n--- Manual Enhanced Ensemble Test ---");');
console.log('  ');
console.log('  const emptyBases = [];');
console.log('  const includeAdd = false;');
console.log('  ');
console.log('  [20, 50, 100].forEach(range => {');
console.log('    console.log(`\\n=== Manual Range ${range} ===`);');
console.log('    ');
console.log('    // Get method results');
console.log('    const method1 = getFrequencyCompatibilityPrediction(emptyBases, range, includeAdd);');
console.log('    const method2 = getWeightedPrediction(emptyBases, range, includeAdd);');
console.log('    const method3 = getHotColdPrediction(emptyBases, range, includeAdd);');
console.log('    ');
console.log('    console.log("Method1 (Freq):", method1.slice(0,6));');
console.log('    console.log("Method2 (Weighted):", method2.slice(0,6));');
console.log('    console.log("Method3 (HotCold):", method3.slice(0,6));');
console.log('    ');
console.log('    // Manual voting');
console.log('    const votes = {};');
console.log('    for (let i = 1; i <= 49; i++) votes[i] = 0;');
console.log('    ');
console.log('    const weights = { frequency: 0.4, weighted: 0.35, hotCold: 0.25 };');
console.log('    ');
console.log('    method1.forEach((num, index) => {');
console.log('      votes[num] += weights.frequency * (10 - index);');
console.log('    });');
console.log('    method2.forEach((num, index) => {');
console.log('      votes[num] += weights.weighted * (10 - index);');
console.log('    });');
console.log('    method3.forEach((num, index) => {');
console.log('      votes[num] += weights.hotCold * (10 - index);');
console.log('    });');
console.log('    ');
console.log('    const topVotes = Object.entries(votes)');
console.log('      .map(([num, vote]) => ({num: parseInt(num), vote}))');
console.log('      .sort((a, b) => b.vote - a.vote)');
console.log('      .slice(0, 10);');
console.log('    ');
console.log('    const ensemble = topVotes.slice(0, 6).map(v => v.num).sort((a,b) => a-b);');
console.log('    console.log(`Manual Ensemble Result: [${ensemble.join(",")}]`);');
console.log('  });');
console.log('}');
console.log('manualEnhancedEnsemble();');

console.log('\n// ===== DEBUG STEP 6: CHECK ACTUAL FUNCTION OUTPUT =====');
console.log('function testActualFunctionOutput() {');
console.log('  console.log("\\n--- Testing actual runEnhancedEnsemblePrediction ---");');
console.log('  ');
console.log('  // Clear bases');
console.log('  ["base1", "base2", "base3", "base4", "base5", "base6"].forEach(id => {');
console.log('    document.getElementById(id).value = "";');
console.log('  });');
console.log('  ');
console.log('  // Test each range');
console.log('  [20, 50, 100].forEach(range => {');
console.log('    console.log(`\\n=== Actual Function Range ${range} ===`);');
console.log('    document.getElementById("predictionMethod").value = "enhanced";');
console.log('    document.getElementById("drawRange").value = range;');
console.log('    ');
console.log('    console.log("About to call runEnhancedEnsemblePrediction...");');
console.log('    runEnhancedEnsemblePrediction();');
console.log('  });');
console.log('}');
console.log('testActualFunctionOutput();');

console.log('\n🎯 EXECUTION ORDER:');
console.log('1. Run each debug step in sequence');
console.log('2. Look for differences in the outputs');
console.log('3. If manual ensemble works but actual function doesn\\'t, there\\'s a bug in the function');
console.log('4. If helper functions show same results, the issue is in the helper functions');
console.log('5. If slice operations show same data, the issue is with range parameter reading');

console.log('\n🚨 EXPECTED FINDINGS:');
console.log('• Helper functions SHOULD show different results for different ranges');
console.log('• Slice operations SHOULD show different data lengths');
console.log('• Manual ensemble SHOULD produce different results');
console.log('• If any of these show identical results, we\\'ve found the bug location');

console.log('\n💡 MOST LIKELY CAUSES:');
console.log('1. Range parameter not being read correctly from dropdown');
console.log('2. Historical data not loaded or corrupted');
console.log('3. Helper functions using cached/static data');
console.log('4. Bug in slice operation or frequency calculation');
console.log('5. Base numbers causing unexpected behavior');