name: Update TOTO Results

on:
  schedule:
    # Run every day at 10 PM SGT (14:00 UTC)
    - cron: '0 14 * * *'
  workflow_dispatch: # Allow manual trigger

jobs:
  update-results:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: |
        npm init -y
        npm install axios cheerio
    
    - name: Fetch and update TOTO results
      run: |
        node << 'EOF'
        const fs = require('fs');
        const axios = require('axios');
        const cheerio = require('cheerio');
        
        async function fetchTotoResults() {
          try {
            console.log('Fetching TOTO results...');
            
            // Try multiple approaches to get TOTO results
            let resultData = null;
            
            // Method 1: Try Singapore Pools main results page
            try {
              const response1 = await axios.get('https://www.singaporepools.com.sg/en/product/sr/Pages/toto_results.aspx', {
                headers: {
                  'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
                },
                timeout: 10000
              });
              
              const $ = cheerio.load(response1.data);
              
              // Try different selectors for TOTO results
              const selectors = [
                '.winning-numbers',
                '.result-number', 
                '[class*="number"]',
                '.drawResults',
                '.latest-result',
                'table tr:first-child td',
                '.toto-result'
              ];
              
              for (const selector of selectors) {
                const element = $(selector).first();
                if (element.length > 0) {
                  const text = element.text().trim();
                  const numbers = text.match(/\d+/g);
                  if (numbers && numbers.length >= 7) {
                    resultData = numbers;
                    console.log('Found results with selector:', selector);
                    break;
                  }
                }
              }
            } catch (error) {
              console.log('Method 1 failed:', error.message);
            }
            
            // Method 2: Try alternative Singapore Pools URL
            if (!resultData) {
              try {
                const response2 = await axios.get('https://www.singaporepools.com.sg/DataFileArchive/Lottery/Output/toto_results_today.xml', {
                  headers: {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                  },
                  timeout: 10000
                });
                
                // Parse XML for results
                const xmlData = response2.data;
                const numberMatches = xmlData.match(/<number>\d+<\/number>/g);
                if (numberMatches && numberMatches.length >= 7) {
                  resultData = numberMatches.map(match => match.replace(/<\/?number>/g, ''));
                  console.log('Found results from XML data');
                }
              } catch (error) {
                console.log('Method 2 failed:', error.message);
              }
            }
            
            // Method 3: Use a fallback or mock data for testing
            if (!resultData) {
              console.log('All methods failed. Using current CSV data (no update needed).');
              return; // Exit gracefully without updating
            }
            
            // Process the found data
            const winningNumbers = resultData.slice(0, 6).map(n => parseInt(n));
            const additionalNumber = parseInt(resultData[6]);
            
            // Validate the numbers
            if (winningNumbers.some(n => isNaN(n) || n < 1 || n > 49) || 
                isNaN(additionalNumber) || additionalNumber < 1 || additionalNumber > 49) {
              throw new Error('Invalid number range detected');
            }
            
            // Read current CSV
            const csvPath = './totoResult.csv';
            const csvData = fs.readFileSync(csvPath, 'utf8');
            const lines = csvData.trim().split('\n');
            
            // Create new result line
            const newLine = `${winningNumbers.join(',')},${additionalNumber}`;
            
            // Check if result already exists
            if (lines[0] === newLine) {
              console.log('Result already exists in CSV:', newLine);
              return;
            }
            
            // Add new result at the beginning
            const updatedCsv = `${newLine}\n${csvData}`;
            
            // Write back to file
            fs.writeFileSync(csvPath, updatedCsv);
            
            console.log('CSV updated with new result:', newLine);
            
            // Set environment variable for commit message
            fs.writeFileSync(process.env.GITHUB_ENV, `NEW_RESULT=${newLine}\n`, { flag: 'a' });
            
          } catch (error) {
            console.error('Error fetching TOTO results:', error.message);
            console.log('No update will be performed.');
            // Don't exit with error - just skip update
            return;
          }
        }
        
        fetchTotoResults();
        EOF
    
    - name: Check for changes
      id: verify-changed-files
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
        else
          echo "changed=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Commit and push changes
      if: steps.verify-changed-files.outputs.changed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add totoResult.csv
        git commit -m "Update TOTO results: $(date '+%Y-%m-%d %H:%M:%S') ${NEW_RESULT:-}"
        git push
