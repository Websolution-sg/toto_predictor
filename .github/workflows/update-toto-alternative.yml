name: Update TOTO Results (Alternative)

on:
  schedule:
    # Run every day at 10 PM SGT (14:00 UTC)
    - cron: '0 14 * * *'
  workflow_dispatch:
    inputs:
      manual_numbers:
        description: 'Manual TOTO numbers (format: 1,2,3,4,5,6,7 where last is additional)'
        required: false
        type: string

jobs:
  update-results:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: |
        npm init -y
        npm install axios cheerio puppeteer
    
    - name: Fetch TOTO results with fallback methods
      run: |
        node << 'EOF'
        const fs = require('fs');
        const axios = require('axios');
        const cheerio = require('cheerio');
        
        async function fetchTotoResults() {
          try {
            console.log('Starting TOTO results fetch...');
            
            // Check if manual input was provided
            const manualNumbers = process.env.MANUAL_NUMBERS;
            if (manualNumbers) {
              console.log('Using manual input:', manualNumbers);
              const numbers = manualNumbers.split(',').map(n => parseInt(n.trim()));
              if (numbers.length === 7) {
                return updateCSV(numbers.slice(0, 6), numbers[6]);
              }
            }
            
            // Method 1: Try official Singapore Pools website
            await tryOfficialWebsite();
            
          } catch (error) {
            console.error('All methods failed:', error.message);
            console.log('No update will be performed. This is normal if no new results are available.');
          }
        }
        
        async function tryOfficialWebsite() {
          try {
            console.log('Trying Singapore Pools website...');
            
            const urls = [
              'https://www.singaporepools.com.sg/en/product/sr/Pages/toto_results.aspx',
              'https://www.singaporepools.com.sg/DataFileArchive/Lottery/Output/toto_results_today.xml',
              'https://www.singaporepools.com.sg/en/toto/results'
            ];
            
            for (const url of urls) {
              try {
                console.log('Trying URL:', url);
                
                const response = await axios.get(url, {
                  headers: {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
                    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                    'Accept-Language': 'en-US,en;q=0.5',
                    'Accept-Encoding': 'gzip, deflate, br',
                    'DNT': '1',
                    'Connection': 'keep-alive',
                    'Upgrade-Insecure-Requests': '1'
                  },
                  timeout: 15000,
                  maxRedirects: 5
                });
                
                console.log('Response status:', response.status);
                console.log('Response length:', response.data.length);
                
                let numbers = [];
                
                if (url.includes('.xml')) {
                  // Parse XML response
                  const xmlData = response.data;
                  const numberMatches = xmlData.match(/<number[^>]*>(\d+)<\/number>/g);
                  if (numberMatches && numberMatches.length >= 7) {
                    numbers = numberMatches.slice(0, 7).map(match => 
                      parseInt(match.replace(/<[^>]*>/g, ''))
                    );
                  }
                } else {
                  // Parse HTML response
                  const $ = cheerio.load(response.data);
                  
                  // Try multiple selectors
                  const selectors = [
                    '.drawResults .number',
                    '.winning-numbers .number',
                    '.result-number',
                    '.toto-result .number',
                    'table.drawTable td',
                    '.results-table td',
                    '[class*="number"]',
                    'span[class*="ball"]',
                    '.ball-number'
                  ];
                  
                  for (const selector of selectors) {
                    const elements = $(selector);
                    if (elements.length >= 7) {
                      numbers = elements.slice(0, 7).map((i, el) => parseInt($(el).text().trim())).get();
                      if (numbers.every(n => !isNaN(n) && n >= 1 && n <= 49)) {
                        console.log('Found numbers with selector:', selector);
                        break;
                      }
                    }
                  }
                  
                  // Fallback: search for number patterns in text
                  if (numbers.length < 7) {
                    const text = response.data;
                    const numberPatterns = text.match(/\b([1-9]|[1-4][0-9])\b/g);
                    if (numberPatterns && numberPatterns.length >= 7) {
                      numbers = numberPatterns.slice(0, 7).map(n => parseInt(n));
                    }
                  }
                }
                
                if (numbers.length >= 7 && numbers.every(n => !isNaN(n) && n >= 1 && n <= 49)) {
                  console.log('Found valid numbers:', numbers);
                  await updateCSV(numbers.slice(0, 6), numbers[6]);
                  return;
                }
                
              } catch (urlError) {
                console.log(`Failed to fetch from ${url}:`, urlError.message);
                continue;
              }
            }
            
            throw new Error('No valid results found from any URL');
          } catch (error) {
            throw error;
          }
        }
        
        async function updateCSV(winningNumbers, additionalNumber) {
          console.log('Updating CSV with:', winningNumbers, additionalNumber);
          
          // Read current CSV
          const csvPath = './totoResult.csv';
          const csvData = fs.readFileSync(csvPath, 'utf8');
          const lines = csvData.trim().split('\n');
          
          // Create new result line
          const newLine = `${winningNumbers.join(',')},${additionalNumber}`;
          
          // Check if result already exists
          if (lines[0] === newLine) {
            console.log('Result already exists in CSV:', newLine);
            return;
          }
          
          // Add new result at the beginning
          const updatedCsv = `${newLine}\n${csvData}`;
          
          // Write back to file
          fs.writeFileSync(csvPath, updatedCsv);
          
          console.log('CSV updated with new result:', newLine);
          
          // Set environment variable for commit message
          fs.appendFileSync(process.env.GITHUB_ENV, `NEW_RESULT=${newLine}\n`);
        }
        
        // Run the fetch process
        fetchTotoResults();
        EOF
      env:
        MANUAL_NUMBERS: ${{ github.event.inputs.manual_numbers }}
    
    - name: Check for changes
      id: verify-changed-files
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "Changes detected in CSV file"
        else
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "No changes detected"
        fi
    
    - name: Commit and push changes
      if: steps.verify-changed-files.outputs.changed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add totoResult.csv
        git commit -m "Update TOTO results: $(date '+%Y-%m-%d %H:%M:%S') - ${NEW_RESULT:-Auto-update}"
        git push
    
    - name: Workflow summary
      run: |
        if [ "${{ steps.verify-changed-files.outputs.changed }}" == "true" ]; then
          echo "✅ TOTO results updated successfully: ${NEW_RESULT:-}"
        else
          echo "ℹ️ No new TOTO results found or CSV already up to date"
        fi
