/**
 * JavaScript Execution Test
 * Test if the fetch is working from JavaScript perspective
 */

const https = require('https');

console.log('üîç JAVASCRIPT EXECUTION TEST');
console.log('============================\n');

// Test 1: Verify CSV is accessible
async function testCSVAccess() {
  console.log('üìã Test 1: CSV Accessibility');
  console.log('----------------------------');
  
  return new Promise((resolve) => {
    https.get('https://websolution-sg.github.io/toto_predictor/totoResult.csv', (res) => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => {
        const lines = data.trim().split('\n');
        console.log(`‚úÖ CSV accessible: ${res.statusCode}`);
        console.log(`üìä Lines: ${lines.length}`);
        console.log(`üéØ First line: ${lines[0]}`);
        console.log(`üìÑ Content-Type: ${res.headers['content-type']}`);
        console.log(`üîÑ Cache-Control: ${res.headers['cache-control']}`);
        resolve(lines[0] === '22,25,29,31,34,43,11');
      });
    }).on('error', (err) => {
      console.log(`‚ùå CSV access failed: ${err.message}`);
      resolve(false);
    });
  });
}

// Test 2: Check HTML page JavaScript
async function testHTMLJavaScript() {
  console.log('\nüìã Test 2: HTML JavaScript Analysis');
  console.log('-----------------------------------');
  
  return new Promise((resolve) => {
    https.get('https://websolution-sg.github.io/toto_predictor/', (res) => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => {
        console.log(`‚úÖ HTML accessible: ${res.statusCode}`);
        
        // Check for fetch implementation
        if (data.includes('fetch(csvUrl')) {
          console.log('‚úÖ Fetch code found in HTML');
        } else {
          console.log('‚ùå Fetch code missing in HTML');
        }
        
        // Check for console.log statements
        if (data.includes('console.log')) {
          console.log('‚úÖ Debug logging present');
        }
        
        // Check for error handling
        if (data.includes('.catch(error')) {
          console.log('‚úÖ Error handling present');
        }
        
        // Check for CSV URL construction
        if (data.includes('totoResult.csv')) {
          console.log('‚úÖ CSV URL reference found');
        }
        
        resolve(true);
      });
    }).on('error', (err) => {
      console.log(`‚ùå HTML access failed: ${err.message}`);
      resolve(false);
    });
  });
}

// Test 3: Simulate browser fetch with exact same parameters
async function simulateBrowserFetch() {
  console.log('\nüìã Test 3: Browser Fetch Simulation');
  console.log('-----------------------------------');
  
  // Simulate exact fetch from index.html
  const cacheBuster = new Date().getTime();
  const randomId = Math.random().toString(36).substring(7);
  const csvUrl = `https://websolution-sg.github.io/toto_predictor/totoResult.csv?v=${cacheBuster}&r=${randomId}&nocache=${Date.now()}`;
  
  console.log(`üì° Simulated URL: ${csvUrl}`);
  
  return new Promise((resolve) => {
    https.get(csvUrl, (res) => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => {
        console.log(`‚úÖ Fetch simulation: ${res.statusCode}`);
        const lines = data.trim().split('\n');
        const historical = lines.map(line => line.split(',').map(Number));
        
        if (historical.length > 0) {
          const recent = historical[0];
          console.log(`üìä Parsed data: ${recent.slice(0, 6).join(',')} + ${recent[6]}`);
          console.log(`üéØ Expected display: RECENT RESULT: ${recent.slice(0, 6).join(',')}(${recent[6]})`);
          
          if (recent.slice(0, 6).join(',') === '22,25,29,31,34,43' && recent[6] === 11) {
            console.log('‚úÖ Data parsing successful - should show correct result');
            resolve(true);
          } else {
            console.log('‚ùå Data parsing shows unexpected result');
            resolve(false);
          }
        } else {
          console.log('‚ùå No data parsed');
          resolve(false);
        }
      });
    }).on('error', (err) => {
      console.log(`‚ùå Fetch simulation failed: ${err.message}`);
      resolve(false);
    });
  });
}

async function runJavaScriptTest() {
  console.log('üöÄ Testing JavaScript execution chain...\n');
  
  const csvOk = await testCSVAccess();
  const htmlOk = await testHTMLJavaScript();
  const fetchOk = await simulateBrowserFetch();
  
  console.log('\nüéØ DIAGNOSIS');
  console.log('============');
  
  if (csvOk && htmlOk && fetchOk) {
    console.log('‚úÖ All tests passed - JavaScript should work');
    console.log('üí° If still showing "Loading...", try:');
    console.log('   1. Hard refresh: Ctrl+Shift+R');
    console.log('   2. Clear browser cache');
    console.log('   3. Open browser DevTools and check for errors');
    console.log('   4. Try incognito/private mode');
  } else {
    console.log('‚ùå Some tests failed:');
    console.log(`   CSV Access: ${csvOk ? '‚úÖ' : '‚ùå'}`);
    console.log(`   HTML JavaScript: ${htmlOk ? '‚úÖ' : '‚ùå'}`);
    console.log(`   Fetch Simulation: ${fetchOk ? '‚úÖ' : '‚ùå'}`);
  }
}

runJavaScriptTest().catch(console.error);
