// IMMEDIATE DIAGNOSTIC SCRIPT FOR RANGE DIFFERENTIATION ISSUE
// User reports: All ranges showing 5,22,31,34,38,45

console.log('🚨 EMERGENCY DIAGNOSTIC: RANGE DIFFERENTIATION FAILURE');
console.log('=' .repeat(60));
console.log('Issue: All ranges producing identical result: 5,22,31,34,38,45');
console.log('Expected: Different results for different ranges');

console.log('\n🔍 STEP 1: VERIFY CSV DATA LOADING');
console.log('Copy and paste this in your browser console:');
console.log('');
console.log('console.log("Historical data length:", historical ? historical.length : "NOT LOADED");');
console.log('if (historical && historical.length > 0) {');
console.log('  console.log("First draw:", historical[0]);');
console.log('  console.log("Last draw:", historical[historical.length-1]);');
console.log('} else {');
console.log('  console.log("❌ CSV data not loaded properly!");');
console.log('}');

console.log('\n🔍 STEP 2: TEST RANGE PARAMETER READING');
console.log('Copy and paste this:');
console.log('');
console.log('function testRangeReading() {');
console.log('  const rangeElement = document.getElementById("drawRange");');
console.log('  console.log("Range element exists:", !!rangeElement);');
console.log('  if (rangeElement) {');
console.log('    console.log("Current range value:", rangeElement.value);');
console.log('    console.log("Available options:", Array.from(rangeElement.options).map(o => o.value));');
console.log('  }');
console.log('  ');
console.log('  // Test changing range');
console.log('  console.log("\\n--- Testing range changes ---");');
console.log('  [20, 50, 100].forEach(testRange => {');
console.log('    rangeElement.value = testRange;');
console.log('    const readValue = parseInt(document.getElementById("drawRange").value);');
console.log('    console.log(`Set to ${testRange}, read as: ${readValue}`);');
console.log('  });');
console.log('}');
console.log('testRangeReading();');

console.log('\n🔍 STEP 3: TEST SLICE OPERATION');
console.log('Copy and paste this:');
console.log('');
console.log('function testSliceOperation() {');
console.log('  if (!historical || historical.length === 0) {');
console.log('    console.log("❌ No historical data for slice test");');
console.log('    return;');
console.log('  }');
console.log('  ');
console.log('  console.log("\\n--- Testing slice operations ---");');
console.log('  [20, 50, 100].forEach(range => {');
console.log('    const sliced = historical.slice(0, range);');
console.log('    console.log(`Range ${range}: ${sliced.length} draws`);');
console.log('    if (sliced.length > 0) {');
console.log('      console.log(`  First draw: ${sliced[0].date}`);');
console.log('      if (sliced.length > 1) {');
console.log('        console.log(`  Last draw: ${sliced[sliced.length-1].date}`);');
console.log('      }');
console.log('    }');
console.log('  });');
console.log('}');
console.log('testSliceOperation();');

console.log('\n🔍 STEP 4: TEST FREQUENCY CALCULATION');
console.log('Copy and paste this:');
console.log('');
console.log('function testFrequencyCalculation() {');
console.log('  if (!historical || historical.length === 0) {');
console.log('    console.log("❌ No historical data for frequency test");');
console.log('    return;');
console.log('  }');
console.log('  ');
console.log('  console.log("\\n--- Testing frequency calculations ---");');
console.log('  [20, 50, 100].forEach(range => {');
console.log('    const sliced = historical.slice(0, range);');
console.log('    const freq = Array(50).fill(0);');
console.log('    ');
console.log('    sliced.forEach(draw => {');
console.log('      draw.numbers.forEach(n => freq[n]++);');
console.log('    });');
console.log('    ');
console.log('    const topFreq = freq');
console.log('      .map((count, num) => ({num, count}))');
console.log('      .filter(item => item.count > 0)');
console.log('      .sort((a, b) => b.count - a.count)');
console.log('      .slice(0, 8);');
console.log('    ');
console.log('    console.log(`Range ${range} top frequencies:`, topFreq.map(f => `${f.num}(${f.count})`).join(", "));');
console.log('  });');
console.log('}');
console.log('testFrequencyCalculation();');

console.log('\n🔍 STEP 5: CHECK HISTORICAL MATCH DETECTION');
console.log('Copy and paste this:');
console.log('');
console.log('function checkHistoricalMatch() {');
console.log('  const problemResult = [5,22,31,34,38,45];');
console.log('  console.log("\\n--- Checking if result matches historical draw ---");');
console.log('  ');
console.log('  if (historical && historical.length > 0) {');
console.log('    const match = historical.find(draw => {');
console.log('      const sorted = [...draw.numbers].sort((a,b) => a-b);');
console.log('      return JSON.stringify(sorted) === JSON.stringify(problemResult);');
console.log('    });');
console.log('    ');
console.log('    if (match) {');
console.log('      console.log("🚨 FOUND EXACT HISTORICAL MATCH!");');
console.log('      console.log("Date:", match.date);');
console.log('      console.log("Numbers:", match.numbers);');
console.log('      console.log("Additional:", match.additional);');
console.log('      console.log("⚠️ System may be detecting this as historical pattern");');
console.log('    } else {');
console.log('      console.log("✅ No exact historical match found");');
console.log('    }');
console.log('  }');
console.log('}');
console.log('checkHistoricalMatch();');

console.log('\n🔍 STEP 6: FORCE RANGE DIFFERENTIATION TEST');
console.log('Copy and paste this:');
console.log('');
console.log('function forceRangeTest() {');
console.log('  console.log("\\n--- FORCE TESTING ENHANCED ENSEMBLE ---");');
console.log('  ');
console.log('  // Clear any base numbers that might cause historical match');
console.log('  ["base1", "base2", "base3", "base4", "base5", "base6"].forEach(id => {');
console.log('    const element = document.getElementById(id);');
console.log('    if (element) element.value = "";');
console.log('  });');
console.log('  ');
console.log('  // Test Enhanced Ensemble with different ranges');
console.log('  document.getElementById("predictionMethod").value = "enhanced";');
console.log('  ');
console.log('  [20, 50, 100].forEach(range => {');
console.log('    console.log(`\\n=== Testing Range ${range} ===`);');
console.log('    document.getElementById("drawRange").value = range;');
console.log('    ');
console.log('    // Verify range was set');
console.log('    const actualRange = parseInt(document.getElementById("drawRange").value);');
console.log('    console.log(`Range set to: ${actualRange}`);');
console.log('    ');
console.log('    // Clear previous result');
console.log('    const resultDiv = document.getElementById("results");');
console.log('    if (resultDiv) resultDiv.innerHTML = "";');
console.log('    ');
console.log('    // Run prediction');
console.log('    try {');
console.log('      predict();');
console.log('      console.log("Prediction completed for range", range);');
console.log('    } catch (error) {');
console.log('      console.log("Error in prediction:", error.message);');
console.log('    }');
console.log('  });');
console.log('}');
console.log('forceRangeTest();');

console.log('\n📋 DIAGNOSIS INSTRUCTIONS:');
console.log('=' .repeat(30));
console.log('1. Open your index.html in browser');
console.log('2. Open Developer Console (F12)');
console.log('3. Run each step above in sequence');
console.log('4. Report back what you see for each step');
console.log('');
console.log('🎯 EXPECTED FINDINGS:');
console.log('• Step 1: Should show historical data loaded');
console.log('• Step 2: Should show range values changing correctly');
console.log('• Step 3: Should show different slice lengths');
console.log('• Step 4: Should show different frequency distributions');
console.log('• Step 5: May reveal if 5,22,31,34,38,45 is historical match');
console.log('• Step 6: Should force different results for different ranges');

console.log('\n🚨 LIKELY CAUSES:');
console.log('1. Historical pattern match detection overriding range logic');
console.log('2. Range value not updating properly');
console.log('3. CSV data not loading correctly');
console.log('4. Base numbers causing historical match detection');
console.log('5. JavaScript caching issue');

console.log('\n💡 QUICK FIX TO TRY:');
console.log('If steps above show everything working but results still same:');
console.log('1. Clear all base number dropdowns (set to empty)');
console.log('2. Hard refresh browser (Ctrl+F5)');
console.log('3. Try different prediction method first, then Enhanced Ensemble');
console.log('4. Check if 5,22,31,34,38,45 appears in your CSV data');